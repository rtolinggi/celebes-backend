// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PROFCOLL
  CLIENT
  ADMIN
}

enum Ride {
  MOTORCYCLE
  CAR
}

enum Result {
  PAID
  SUCCESS
  FAILED
}

model VerifiedEmail {
  id        Int      @id @default(autoincrement())
  token     String
  expired   Int      @default(3600)
  createdAt DateTime @default(now())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  passwordHash  String
  role          Role           @default(PROFCOLL)
  isActive      Boolean        @default(false)
  isVerified    Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  refreshToken  String?
  profile       Profile?
  VerifiedEmail VerifiedEmail?
  Finding       Finding[]
}

model Profile {
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String
  address   String
  contact   String?
  birthday  DateTime?
  joinDate  DateTime?
  endDate   DateTime?
  avatar    String    @default("avatar.png")
  sppi      String?
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @unique
}

model Client {
  id          String    @id @default(uuid())
  companyName String
  brand       String
  address     String
  branch      String
  joinDate    String?
  endDate     String?
  isActive    Boolean   @default(true)
  account     Account[]
}

model Account {
  noKontrak    String    @id
  costumerName String
  numPolice    String
  numChassis   String
  numMachine   String
  type         Ride
  color        String
  year         DateTime
  overdue      String
  outstanding  Int
  branch       String
  tenor        Int
  installment  Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  publish      Boolean   @default(true)
  assignBy     String
  Client       Client?   @relation(fields: [clientId], references: [id])
  clientId     String?
  finding      Finding[]
}

model Finding {
  id               Int      @id @default(autoincrement())
  cordinat         String?
  description      String?
  result           Result   @default(SUCCESS)
  createdAt        DateTime @default(now())
  Account          Account? @relation(fields: [accountNoKontrak], references: [noKontrak])
  accountNoKontrak String?
  user             User     @relation(fields: [userId], references: [id])
  userId           String
}
